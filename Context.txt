Read file: Context.txt
```json
{
  "project": "Ooptions - Financial News and Market Event Analysis System",
  "description": "A comprehensive system for analyzing financial news headlines, classifying market events, matching them to historical patterns, generating trading recommendations based on macro data and event analysis, and evaluating trade performance.",
  "version": "1.1.0",
  "api_dependencies": {
    "openai": {
      "description": "Used for headline classification and trade recommendation generation",
      "configuration": {
        "api_key_source": ["OPENAI_API_KEY environment variable", "system environment"],
        "default_model": "gpt-3.5-turbo",
        "error_handling": "Robust retry mechanism with exponential backoff",
        "fallback": "DummyClassifier when API is unavailable"
      }
    },
    "fred": {
      "description": "Federal Reserve Economic Data - used for macroeconomic indicators",
      "configuration": {
        "api_key_source": "FRED_API_KEY environment variable",
        "cache_mechanism": "macro_data_cache.json with configurable expiry"
      }
    },
    "yfinance": {
      "description": "Yahoo Finance API for market data and options chains",
      "configuration": {
        "api_key_required": false,
        "cache_mechanism": "In-memory cache with timeout"
      }
    }
  },
  "core_components": {
    "data_collection": {
      "rss_ingestor": {
        "purpose": "Fetches financial headlines from various RSS feeds",
        "feeds": ["Yahoo Finance", "CNBC", "Reuters", "Financial Times", "Bloomberg"],
        "output": "List of headline dictionaries with title, source, published date",
        "code_content": "Contains functions for parsing RSS feeds and extracting headline data."
      },
      "macro_data_collector": {
        "purpose": "Collects and caches macroeconomic indicators",
        "data_sources": ["FRED API", "Yahoo Finance", "CSV fallback"],
        "indicators": ["CPI", "Fed Funds Rate", "Unemployment", "Treasury Yields"],
        "output": "Dictionary of macro indicators with values and timestamps",
        "code_content": "Includes API integration for data retrieval and caching mechanisms."
      },
      "options_data_collector": {
        "purpose": "Fetches options market metrics",
        "metrics": ["IV", "Put/Call Ratio", "Open Interest", "ATM/OTM values"],
        "output": "Options snapshot dictionary for a given ticker",
        "code_content": "Implements data fetching and processing for options metrics."
      },
      "technical_indicator_collector": {
        "purpose": "Calculates technical indicators for stocks",
        "indicators": ["RSI", "MACD", "Moving Averages"],
        "output": "Technical indicator dictionary for a given ticker",
        "code_content": "Contains algorithms for calculating various technical indicators."
      }
    },
    "analysis": {
      "llm_event_classifier": {
        "purpose": "Classifies financial headlines by type, sentiment, sector",
        "implementation": ["OpenAIClassifier", "DummyClassifier (fallback)"],
        "output": "Classification dictionary with event_type, sentiment, sector, trade recommendation",
        "code_content": "Utilizes machine learning models for classification tasks."
      },
      "event_tagger": {
        "purpose": "Adds contextual tags to financial events",
        "tags": ["surprise_positive", "is_fed_week", "is_cpi_week", "is_earnings_season", "is_repeat_event"],
        "output": "Dictionary of boolean event tags",
        "code_content": "Applies rules and logic for tagging events with context."
      },
      "prompt_context_builder": {
        "purpose": "Enriches prompts with economic context",
        "enhancements": ["time_aware_context", "delta_description", "relevance_weights"],
        "output": "Enhanced prompt context dictionary",
        "code_content": "Generates enriched prompts using contextual data."
      },
      "historical_matcher": {
        "purpose": "Matches events to historical patterns",
        "matching_mechanism": "Semantic similarity with templates",
        "output": "List of similar historical events with match scores",
        "code_content": "Implements pattern matching algorithms for historical data."
      },
      "sentiment_analyzer": {
        "purpose": "Analyzes sentiment in financial texts",
        "output": "Sentiment metrics and historical comparisons",
        "code_content": "Performs sentiment analysis using text processing techniques."
      }
    },
    "recommendation": {
      "trade_picker": {
        "purpose": "Generates trade ideas based on event analysis",
        "output": "Trade recommendation with ticker, option_type, strike, expiry, rationale",
        "code_content": "Generates trade recommendations using analysis results."
      },
      "llm_event_query": {
        "purpose": "Main entry point for user queries",
        "features": ["Natural language parsing", "Historical event matching", "Trade generation"],
        "output": "Complete analysis with market impact and trade recommendation",
        "code_content": "Handles user queries and integrates various analysis components. Key functionalities include natural language processing, data integration, trade idea generation, error handling, crypto and ticker standardization, historical data analysis, interactive and continuous modes, and session management."
      }
    },
    "persistence": {
      "trade_persistence": {
        "purpose": "Stores trade recommendations",
        "storage": "trade_history.json file",
        "schema": "JSON with headline, similar_events, trade_idea, metadata",
        "code_content": "Manages storage and retrieval of trade data."
      },
      "analysis_persistence": {
        "purpose": "Stores historical analyses",
        "storage": "analysis_history/ directory structure",
        "components": ["events/", "similar_events/", "queries/", "analysis_index.json"],
        "cloud_integration": "Optional via CLOUD_STORAGE_API_KEY",
        "code_content": "Handles storage of analysis data and supports cloud integration."
      },
      "evaluation": {
        "purpose": "Evaluates trade performance",
        "storage": "evaluated_trades.json",
        "metrics": ["actual_return", "max_profit", "success_rate"],
        "code_content": "Evaluates trade outcomes and records performance metrics."
      }
    }
  },
  "interfaces": {
    "cli": {
      "main": "python llm_event_query.py \"query text\"",
      "view_trades": "python view_trades.py [view|stats]",
      "view_analysis": "python view_analysis.py [list|show|history|stats|export|delete|reindex]"
    },
    "web": {
      "streamlit": "python streamlit_app.py"
    }
  },
  "data_flow": [
    "1. rss_ingestor.py → llm_event_classifier.py → trade_picker.py → trade_persistence.py",
    "2. llm_event_query.py → [macro_data + options_data + event_tags] → OpenAI API → trade recommendation",
    "3. llm_event_query.py → historical_matcher.py → analysis_persistence.py",
    "4. evaluation_runner.py → evaluator.py → evaluated_trades.json"
  ],
  "authentication": {
    "openai_api": {
      "status": "Needs valid API key in .env file",
      "fallback": "DummyClassifier provides rule-based classification"
    },
    "fred_api": {
      "status": "Working",
      "configuration": "FRED_API_KEY in environment variables"
    }
  },
  "key_data_models": {
    "headline": {
      "title": "string",
      "source": "string",
      "published": "timestamp",
      "summary": "string (optional)",
      "url": "string (optional)"
    },
    "classification": {
      "event_type": "string",
      "sentiment": "string (Bullish, Bearish, Neutral)",
      "sector": "string",
      "event_tags": "dictionary of boolean tags",
      "direction": "string (BUY/SELL)"
    },
    "trade_idea": {
      "ticker": "string",
      "trade_type": "string (option/equity)",
      "option_type": "string (CALL/PUT)",
      "strike": "number/string (e.g., 180.0 or 'ATM')",
      "expiry": "string (date or period)",
      "direction": "string (BUY/SELL)",
      "rationale": "string"
    },
    "similar_event": {
      "event_summary": "string",
      "event_date": "string (YYYY-MM-DD)",
      "match_score": "number (0.0-1.0)",
      "price_change_pct": "number",
      "affected_ticker": "string"
    },
    "trade_record": {
      "headline": "headline object",
      "similar_events": "array of similar_event objects",
      "trade_idea": "trade_idea object",
      "timestamp": "timestamp",
      "saved_timestamp": "timestamp",
      "macro_snapshot": "macro indicator dictionary",
      "options_snapshot": "options metrics dictionary",
      "technical_indicators": "technical indicator dictionary",
      "event_tags": "dictionary of boolean tags",
      "prompt_enhancers": "dictionary of prompt enhancements"
    }
  },
  "ui_styling": {
    "description": "The application uses a clean, modern terminal-inspired interface with consistent styling across all components",
    "color_scheme": {
      "background": "#121212",
      "panels": "#1a1a1a",
      "text": "#ffffff",
      "accent": "#00ff00",
      "positive": "#00ff00",
      "negative": "#00aa00",
      "borders": "#333333",
      "muted_text": "#cccccc"
    },
    "typography": {
      "primary_font": "'Courier New', monospace",
      "text_size": {
        "standard": "0.85rem",
        "small": "0.75rem",
        "headers": "1.2rem"
      },
      "text_transform": "UPPERCASE for headers and important elements"
    },
    "components": {
      "tabs": {
        "style": "Dark background with green highlight for selected tab",
        "colors": "Selected: #333333 background with #ffffff text and #00ff00 border-top",
        "unselected": "#1a1a1a background with #cccccc text"
      },
      "buttons": {
        "style": "Dark background with white text and rounded corners",
        "hover": "Subtle highlight on hover with green text",
        "text_transform": "UPPERCASE"
      },
      "news_feed": {
        "layout": "Terminal-style grid with columns for headline, date, time, and source",
        "headlines": "White text for headlines, green for sources",
        "dates": "Muted gray text for timestamps",
        "hover_effect": "Subtle highlight and green left border on hover",
        "corners": "Rounded corners (4px radius) for all containers"
      },
      "chat_interface": {
        "user_messages": "Dark background with green left border and white text",
        "assistant_messages": "Dark background with green left border and green text",
        "prefixes": "QUERY > for user, OPT_BOT > for assistant responses",
        "corners": "Rounded corners (4px radius) for all message boxes"
      },
      "status_bar": {
        "position": "Fixed at bottom",
        "style": "Dark background with session info and current time"
      }
    },
    "interactive_elements": {
      "refresh_indicator": "Green blinking dot for visual feedback during data refresh",
      "draggable_widgets": "Support for draggable and resizable panels with header controls"
    },
    "design_principles": [
      "Maintain dark theme with green accents throughout the application",
      "Use darker gray (#121212) for main background and lighter gray (#1a1a1a) for panels",
      "All text should be white (#ffffff) for maximum readability",
      "Use green (#00ff00) for all accent elements and highlights",
      "Add rounded corners (4px radius) to all containers and interactive elements",
      "Prioritize information density while maintaining readability",
      "Use uppercase text for headers, buttons, and important UI elements",
      "Keep borders subtle with #333333 color",
      "Ensure all text has proper contrast with backgrounds",
      "Use monospace fonts consistently throughout the interface",
      "Support both command interface and news feed through tabbed layout",
      "Provide visual feedback for data updates and user actions"
    ],
    "implementation": "CSS styles are implemented directly in streamlit_app.py using st.markdown with unsafe_allow_html=True"
  },
  "current_issues": [
    "Need valid OpenAI API key in environment variables",
    "Ensure consistent data flow between components",
    "Improve error handling for external API dependencies"
  ],
  "future_enhancements": [
    "Implement machine learning for reinforcement learning from trade outcomes",
    "Add more robust error handling for external API dependencies",
    "Expand cryptocurrency support and specialized analysis",
    "Develop comprehensive backtesting framework",
    "Add real-time alerting for high-confidence trade signals"
  ],
  "styling_guidelines": [
    "IMPORTANT: Maintain the modern terminal-inspired dark theme throughout all features",
    "DO NOT remove or significantly alter existing UI elements or features without explicit instructions",
    "Keep consistent font colors (#ffffff for standard text, #00ff00 for accents and highlights)",
    "Use darker gray (#121212) for main background and lighter gray (#1a1a1a) for panels and containers",
    "Maintain rounded corners (4px radius) on all UI elements for a cleaner, modern look",
    "Always use 'Courier New', monospace font family for all text elements",
    "Maintain the tabbed interface with COMMAND and NEWS FEED tabs",
    "Preserve real-time updates and refresh indicators in the news feed",
    "Keep the status bar at the bottom with session information and timestamp",
    "Ensure draggable widgets maintain consistent styling with the terminal theme",
    "Use uppercase text for headers, buttons, and important UI elements",
    "Avoid text decoration (underlines) in headlines and navigation elements",
    "Use only green colors for all accent elements - NO orange, pink, or blue accents anywhere",
    "Use #cccccc for muted text instead of darker grays to ensure readability",
    "Maintain current functionality while enhancing visual consistency"
  ],
  "development_rules": [
    "NEVER ADD OR REMOVE FEATURES WITHOUT EXPLICIT INSTRUCTIONS",
    "ONLY IMPLEMENT WHAT IS SPECIFICALLY REQUESTED",
    "DO NOT MODIFY EXISTING FUNCTIONALITY UNLESS DIRECTLY INSTRUCTED TO DO SO",
    "PRESERVE ALL EXISTING UI COMPONENTS INCLUDING THE NEWS TERMINAL",
    "MAINTAIN EXACT FUNCTIONALITY OF ALL COMPONENTS UNLESS SPECIFICALLY ASKED TO CHANGE THEM",
    "DO NOT MAKE ASSUMPTIONS ABOUT DESIRED CHANGES - STRICTLY FOLLOW EXACT REQUIREMENTS",
    "WHEN IN DOUBT, MAINTAIN CURRENT FUNCTIONALITY RATHER THAN INTRODUCING NEW FEATURES",
    "FOCUS EXCLUSIVELY ON IMPLEMENTING THE SPECIFIC REQUESTED CHANGES WITHOUT SCOPE CREEP",
    "PRESERVE ALL TERMINAL STYLING WITH THE NEW COLOR SCHEME AND DESIGN ELEMENTS",
    "THE NEWS TERMINAL AND EXISTING TABS MUST ALWAYS REMAIN FUNCTIONAL AND UNCHANGED UNLESS EXPLICITLY REQUESTED",
    "STRICTLY ADHERE TO THE UPDATED COLOR SCHEME: DARK GRAY BACKGROUND, GREEN ACCENTS, WHITE TEXT, ROUNDED CORNERS",
    "NEVER USE DUMMY VARIABLES OR FALLBACKS INSTEAD OF ACTUAL API SERVICES",
    "ALWAYS USE THE PROVIDED API KEYS - NEVER SUBSTITUTE WITH PLACEHOLDERS OR DUMMY IMPLEMENTATIONS"
  ]
}
```
